{"env_info": "sys.platform: linux\nPython: 3.8.15 (default, Nov 24 2022, 15:19:38) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA RTX A4000\nCUDA_HOME: /home/ubuntu/anaconda3/envs/openmmlab\nNVCC: Cuda compilation tools, release 11.7, V11.7.99\nGCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0\nPyTorch: 1.13.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.5\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0\nOpenCV: 4.6.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.28.1+c14dd6c", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_train2017.json',\n        img_prefix='data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs/faster_rcnn_r50_fpn_1x_coco'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1369581799, "exp_name": "faster_rcnn_r50_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 3790, "data_time": 0.0459, "loss_rpn_cls": 0.4891, "loss_rpn_bbox": 0.12158, "loss_cls": 1.00243, "acc": 86.78906, "loss_bbox": 0.07281, "loss": 1.68593, "time": 0.27132}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 3790, "data_time": 0.00387, "loss_rpn_cls": 0.26034, "loss_rpn_bbox": 0.10635, "loss_cls": 0.46756, "acc": 94.43945, "loss_bbox": 0.17975, "loss": 1.014, "time": 0.21576}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 3790, "data_time": 0.00399, "loss_rpn_cls": 0.22703, "loss_rpn_bbox": 0.10113, "loss_cls": 0.45658, "acc": 94.30469, "loss_bbox": 0.19657, "loss": 0.98131, "time": 0.21198}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 3790, "data_time": 0.004, "loss_rpn_cls": 0.23577, "loss_rpn_bbox": 0.12679, "loss_cls": 0.46178, "acc": 94.37891, "loss_bbox": 0.19386, "loss": 1.0182, "time": 0.21489}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 3790, "data_time": 0.00392, "loss_rpn_cls": 0.22582, "loss_rpn_bbox": 0.12445, "loss_cls": 0.47502, "acc": 93.38867, "loss_bbox": 0.22605, "loss": 1.05135, "time": 0.21534}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 3790, "data_time": 0.00399, "loss_rpn_cls": 0.17252, "loss_rpn_bbox": 0.08089, "loss_cls": 0.39798, "acc": 94.48828, "loss_bbox": 0.1927, "loss": 0.84409, "time": 0.21475}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 3790, "data_time": 0.00413, "loss_rpn_cls": 0.20407, "loss_rpn_bbox": 0.10531, "loss_cls": 0.45863, "acc": 93.55469, "loss_bbox": 0.22553, "loss": 0.99355, "time": 0.21276}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 3790, "data_time": 0.00403, "loss_rpn_cls": 0.19803, "loss_rpn_bbox": 0.10048, "loss_cls": 0.46411, "acc": 93.93164, "loss_bbox": 0.21191, "loss": 0.97453, "time": 0.21838}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 3790, "data_time": 0.00425, "loss_rpn_cls": 0.16309, "loss_rpn_bbox": 0.09657, "loss_cls": 0.49235, "acc": 93.59961, "loss_bbox": 0.22894, "loss": 0.98096, "time": 0.21681}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 3790, "data_time": 0.00425, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 58.20632, "loss_bbox": NaN, "loss": NaN, "time": 0.19348}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 3790, "data_time": 0.00422, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.42998, "loss_bbox": NaN, "loss": NaN, "time": 0.18419}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 3790, "data_time": 0.00412, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.63656, "loss_bbox": NaN, "loss": NaN, "time": 0.1798}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 3790, "data_time": 0.00427, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.47203, "loss_bbox": NaN, "loss": NaN, "time": 0.18092}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 3790, "data_time": 0.00402, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 33.76483, "loss_bbox": NaN, "loss": NaN, "time": 0.17878}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 3790, "data_time": 0.00414, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.34473, "loss_bbox": NaN, "loss": NaN, "time": 0.18095}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 3790, "data_time": 0.00399, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.14426, "loss_bbox": NaN, "loss": NaN, "time": 0.18048}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 3790, "data_time": 0.00423, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.33544, "loss_bbox": NaN, "loss": NaN, "time": 0.18209}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 3790, "data_time": 0.00411, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.57336, "loss_bbox": NaN, "loss": NaN, "time": 0.17781}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 3790, "data_time": 0.0042, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.97336, "loss_bbox": NaN, "loss": NaN, "time": 0.18449}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 3790, "data_time": 0.00422, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.02235, "loss_bbox": NaN, "loss": NaN, "time": 0.18429}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 3790, "data_time": 0.00416, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 23.01027, "loss_bbox": NaN, "loss": NaN, "time": 0.18592}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 3790, "data_time": 0.00425, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.02989, "loss_bbox": NaN, "loss": NaN, "time": 0.17911}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 3790, "data_time": 0.00409, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.93708, "loss_bbox": NaN, "loss": NaN, "time": 0.18408}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 3790, "data_time": 0.00417, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.50563, "loss_bbox": NaN, "loss": NaN, "time": 0.17906}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 3790, "data_time": 0.00412, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.92575, "loss_bbox": NaN, "loss": NaN, "time": 0.18433}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 3790, "data_time": 0.00415, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.92954, "loss_bbox": NaN, "loss": NaN, "time": 0.17902}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 3790, "data_time": 0.00425, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.96285, "loss_bbox": NaN, "loss": NaN, "time": 0.18486}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.02, "memory": 3790, "data_time": 0.00417, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 20.24625, "loss_bbox": NaN, "loss": NaN, "time": 0.18073}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.02, "memory": 3790, "data_time": 0.0041, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.49229, "loss_bbox": NaN, "loss": NaN, "time": 0.17978}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.02, "memory": 3790, "data_time": 0.00427, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.45252, "loss_bbox": NaN, "loss": NaN, "time": 0.18293}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.02, "memory": 3790, "data_time": 0.00418, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.84898, "loss_bbox": NaN, "loss": NaN, "time": 0.18054}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.02, "memory": 3790, "data_time": 0.0042, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.83889, "loss_bbox": NaN, "loss": NaN, "time": 0.18306}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.02, "memory": 3790, "data_time": 0.00415, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 31.12218, "loss_bbox": NaN, "loss": NaN, "time": 0.18365}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.02, "memory": 3790, "data_time": 0.00425, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.04034, "loss_bbox": NaN, "loss": NaN, "time": 0.18309}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.02, "memory": 3790, "data_time": 0.0044, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.24163, "loss_bbox": NaN, "loss": NaN, "time": 0.18354}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.02, "memory": 3790, "data_time": 0.0043, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 20.73347, "loss_bbox": NaN, "loss": NaN, "time": 0.1787}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.02, "memory": 3790, "data_time": 0.0044, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.73008, "loss_bbox": NaN, "loss": NaN, "time": 0.18127}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.02, "memory": 3790, "data_time": 0.0044, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 31.54897, "loss_bbox": NaN, "loss": NaN, "time": 0.17967}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.02, "memory": 3790, "data_time": 0.00423, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.68494, "loss_bbox": NaN, "loss": NaN, "time": 0.18422}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.02, "memory": 3790, "data_time": 0.00435, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.48459, "loss_bbox": NaN, "loss": NaN, "time": 0.18642}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.02, "memory": 3790, "data_time": 0.00443, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 25.44548, "loss_bbox": NaN, "loss": NaN, "time": 0.18093}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.02, "memory": 3790, "data_time": 0.0044, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 32.47522, "loss_bbox": NaN, "loss": NaN, "time": 0.18359}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.02, "memory": 3790, "data_time": 0.00436, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.28553, "loss_bbox": NaN, "loss": NaN, "time": 0.17882}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.02, "memory": 3790, "data_time": 0.00442, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.548, "loss_bbox": NaN, "loss": NaN, "time": 0.18202}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 0.02, "memory": 3790, "data_time": 0.0045, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.94133, "loss_bbox": NaN, "loss": NaN, "time": 0.18274}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.02, "memory": 3790, "data_time": 0.00438, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.01751, "loss_bbox": NaN, "loss": NaN, "time": 0.18321}
{"mode": "train", "epoch": 1, "iter": 2350, "lr": 0.02, "memory": 3790, "data_time": 0.00437, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.64757, "loss_bbox": NaN, "loss": NaN, "time": 0.18668}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.02, "memory": 3790, "data_time": 0.00444, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.85381, "loss_bbox": NaN, "loss": NaN, "time": 0.18662}
{"mode": "train", "epoch": 1, "iter": 2450, "lr": 0.02, "memory": 3790, "data_time": 0.00445, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.81061, "loss_bbox": NaN, "loss": NaN, "time": 0.1836}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 0.02, "memory": 3790, "data_time": 0.00453, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.3892, "loss_bbox": NaN, "loss": NaN, "time": 0.1815}
{"mode": "train", "epoch": 1, "iter": 2550, "lr": 0.02, "memory": 3790, "data_time": 0.00427, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.21654, "loss_bbox": NaN, "loss": NaN, "time": 0.17959}
{"mode": "train", "epoch": 1, "iter": 2600, "lr": 0.02, "memory": 3790, "data_time": 0.00425, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.2485, "loss_bbox": NaN, "loss": NaN, "time": 0.1799}
{"mode": "train", "epoch": 1, "iter": 2650, "lr": 0.02, "memory": 3790, "data_time": 0.00448, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.34481, "loss_bbox": NaN, "loss": NaN, "time": 0.18514}
{"mode": "train", "epoch": 1, "iter": 2700, "lr": 0.02, "memory": 3790, "data_time": 0.00438, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 23.00831, "loss_bbox": NaN, "loss": NaN, "time": 0.18168}
{"mode": "train", "epoch": 1, "iter": 2750, "lr": 0.02, "memory": 3790, "data_time": 0.00445, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 28.78916, "loss_bbox": NaN, "loss": NaN, "time": 0.18152}
{"mode": "train", "epoch": 1, "iter": 2800, "lr": 0.02, "memory": 3790, "data_time": 0.00451, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 25.01116, "loss_bbox": NaN, "loss": NaN, "time": 0.18238}
{"mode": "train", "epoch": 1, "iter": 2850, "lr": 0.02, "memory": 3790, "data_time": 0.00454, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.93284, "loss_bbox": NaN, "loss": NaN, "time": 0.17999}
{"mode": "train", "epoch": 1, "iter": 2900, "lr": 0.02, "memory": 3790, "data_time": 0.00437, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.82851, "loss_bbox": NaN, "loss": NaN, "time": 0.18171}
{"mode": "train", "epoch": 1, "iter": 2950, "lr": 0.02, "memory": 3790, "data_time": 0.00446, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.69545, "loss_bbox": NaN, "loss": NaN, "time": 0.1823}
{"mode": "train", "epoch": 1, "iter": 3000, "lr": 0.02, "memory": 3790, "data_time": 0.00456, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.35269, "loss_bbox": NaN, "loss": NaN, "time": 0.18542}
{"mode": "train", "epoch": 1, "iter": 3050, "lr": 0.02, "memory": 3790, "data_time": 0.00444, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 32.96056, "loss_bbox": NaN, "loss": NaN, "time": 0.18431}
{"mode": "train", "epoch": 1, "iter": 3100, "lr": 0.02, "memory": 3790, "data_time": 0.0045, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.47804, "loss_bbox": NaN, "loss": NaN, "time": 0.18204}
{"mode": "train", "epoch": 1, "iter": 3150, "lr": 0.02, "memory": 3790, "data_time": 0.00465, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.6626, "loss_bbox": NaN, "loss": NaN, "time": 0.18324}
{"mode": "train", "epoch": 1, "iter": 3200, "lr": 0.02, "memory": 3790, "data_time": 0.00471, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 25.24535, "loss_bbox": NaN, "loss": NaN, "time": 0.18387}
{"mode": "train", "epoch": 1, "iter": 3250, "lr": 0.02, "memory": 3790, "data_time": 0.00455, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.30596, "loss_bbox": NaN, "loss": NaN, "time": 0.18011}
{"mode": "train", "epoch": 1, "iter": 3300, "lr": 0.02, "memory": 3790, "data_time": 0.0045, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.79174, "loss_bbox": NaN, "loss": NaN, "time": 0.18329}
{"mode": "train", "epoch": 1, "iter": 3350, "lr": 0.02, "memory": 3790, "data_time": 0.00442, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 34.11979, "loss_bbox": NaN, "loss": NaN, "time": 0.18194}
{"mode": "train", "epoch": 1, "iter": 3400, "lr": 0.02, "memory": 3790, "data_time": 0.00469, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.54499, "loss_bbox": NaN, "loss": NaN, "time": 0.18354}
{"mode": "train", "epoch": 1, "iter": 3450, "lr": 0.02, "memory": 3790, "data_time": 0.00434, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.12795, "loss_bbox": NaN, "loss": NaN, "time": 0.1802}
{"mode": "train", "epoch": 1, "iter": 3500, "lr": 0.02, "memory": 3790, "data_time": 0.00461, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.33036, "loss_bbox": NaN, "loss": NaN, "time": 0.18015}
{"mode": "train", "epoch": 1, "iter": 3550, "lr": 0.02, "memory": 3790, "data_time": 0.00461, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.6021, "loss_bbox": NaN, "loss": NaN, "time": 0.18497}
{"mode": "train", "epoch": 1, "iter": 3600, "lr": 0.02, "memory": 3790, "data_time": 0.00453, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 22.348, "loss_bbox": NaN, "loss": NaN, "time": 0.18}
{"mode": "train", "epoch": 1, "iter": 3650, "lr": 0.02, "memory": 3790, "data_time": 0.00441, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.51587, "loss_bbox": NaN, "loss": NaN, "time": 0.18013}
{"mode": "train", "epoch": 1, "iter": 3700, "lr": 0.02, "memory": 3790, "data_time": 0.00437, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.89909, "loss_bbox": NaN, "loss": NaN, "time": 0.18312}
{"mode": "train", "epoch": 1, "iter": 3750, "lr": 0.02, "memory": 3790, "data_time": 0.00445, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.37868, "loss_bbox": NaN, "loss": NaN, "time": 0.1843}
{"mode": "train", "epoch": 1, "iter": 3800, "lr": 0.02, "memory": 3790, "data_time": 0.00456, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.45562, "loss_bbox": NaN, "loss": NaN, "time": 0.18106}
{"mode": "train", "epoch": 1, "iter": 3850, "lr": 0.02, "memory": 3790, "data_time": 0.00455, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.99513, "loss_bbox": NaN, "loss": NaN, "time": 0.18063}
{"mode": "train", "epoch": 1, "iter": 3900, "lr": 0.02, "memory": 3790, "data_time": 0.00458, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.74261, "loss_bbox": NaN, "loss": NaN, "time": 0.18118}
{"mode": "train", "epoch": 1, "iter": 3950, "lr": 0.02, "memory": 3790, "data_time": 0.00456, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 31.06692, "loss_bbox": NaN, "loss": NaN, "time": 0.18262}
{"mode": "train", "epoch": 1, "iter": 4000, "lr": 0.02, "memory": 3790, "data_time": 0.0046, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 25.30191, "loss_bbox": NaN, "loss": NaN, "time": 0.1864}
{"mode": "train", "epoch": 1, "iter": 4050, "lr": 0.02, "memory": 3790, "data_time": 0.00432, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 30.91963, "loss_bbox": NaN, "loss": NaN, "time": 0.18093}
{"mode": "train", "epoch": 1, "iter": 4100, "lr": 0.02, "memory": 3790, "data_time": 0.00453, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 23.46859, "loss_bbox": NaN, "loss": NaN, "time": 0.18031}
{"mode": "train", "epoch": 1, "iter": 4150, "lr": 0.02, "memory": 3790, "data_time": 0.00437, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.95431, "loss_bbox": NaN, "loss": NaN, "time": 0.18096}
{"mode": "train", "epoch": 1, "iter": 4200, "lr": 0.02, "memory": 3790, "data_time": 0.00452, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 31.18611, "loss_bbox": NaN, "loss": NaN, "time": 0.18131}
{"mode": "train", "epoch": 1, "iter": 4250, "lr": 0.02, "memory": 3790, "data_time": 0.00474, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.81483, "loss_bbox": NaN, "loss": NaN, "time": 0.17998}
